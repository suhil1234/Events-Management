// <auto-generated />
using System;
using Event_managment.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Event_managment.Migrations
{
    [DbContext(typeof(EventManagement2Context))]
    [Migration("20241102002801_AddSoftDeleteApproach")]
    partial class AddSoftDeleteApproach
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Event_managment.Models.TbAccessList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IpAddress" }, "ip_address_UNIQUE")
                        .IsUnique();

                    b.ToTable("tb_access_list", (string)null);
                });

            modelBuilder.Entity("Event_managment.Models.TbEvent", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EventId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime")
                        .HasColumnName("event_date");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("event_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("EventId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "LocationId" }, "FK_tb_events_tb_locations");

                    b.HasIndex(new[] { "EventName", "EventDate" }, "UQ_tb_events_Name_Date")
                        .IsUnique();

                    b.ToTable("tb_events", (string)null);
                });

            modelBuilder.Entity("Event_managment.Models.TbEventParticipant", b =>
                {
                    b.Property<int>("EventParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("event_participant_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EventParticipantId"));

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("int")
                        .HasColumnName("participant_id");

                    b.HasKey("EventParticipantId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EventId" }, "FK_EventParticipants_Event");

                    b.HasIndex(new[] { "ParticipantId" }, "FK_EventParticipants_Participant");

                    b.ToTable("tb_event_participants", (string)null);
                });

            modelBuilder.Entity("Event_managment.Models.TbLocation", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address");

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("city");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("location_name");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("state");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("zip_code");

                    b.HasKey("LocationId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "LocationName", "Address" }, "UQ_tb_locations_Name_Address")
                        .IsUnique()
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 100 });

                    b.ToTable("tb_locations", (string)null);
                });

            modelBuilder.Entity("Event_managment.Models.TbParticipant", b =>
                {
                    b.Property<int>("ParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("participant_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ParticipantId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ParticipantName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("participant_name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("ParticipantId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "UQ_tb_participants_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "UQ_tb_participants_Phone")
                        .IsUnique();

                    b.ToTable("tb_participants", (string)null);
                });

            modelBuilder.Entity("Event_managment.Models.VwEventParticipationSummary", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("event_name");

                    b.Property<long>("ParticipantCount")
                        .HasColumnType("bigint")
                        .HasColumnName("participant_count");

                    b.ToTable((string)null);

                    b.ToView("vw_event_participation_summary", (string)null);
                });

            modelBuilder.Entity("Event_managment.Models.VwVenueCapacityStatus", b =>
                {
                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<string>("CapacityStatus")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("capacity_status")
                        .HasDefaultValueSql("''");

                    b.Property<long>("CurrentParticipants")
                        .HasColumnType("bigint")
                        .HasColumnName("current_participants");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("location_name");

                    b.ToTable((string)null);

                    b.ToView("vw_venue_capacity_status", (string)null);
                });

            modelBuilder.Entity("Event_managment.Models.TbEvent", b =>
                {
                    b.HasOne("Event_managment.Models.TbLocation", "Location")
                        .WithMany("TbEvents")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_tb_events_tb_locations");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Event_managment.Models.TbEventParticipant", b =>
                {
                    b.HasOne("Event_managment.Models.TbEvent", "TbEvent")
                        .WithMany("EventParticipants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_EventParticipants_Event");

                    b.HasOne("Event_managment.Models.TbParticipant", "TbParticipant")
                        .WithMany("EventParticipants")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_EventParticipants_Participant");

                    b.Navigation("TbEvent");

                    b.Navigation("TbParticipant");
                });

            modelBuilder.Entity("Event_managment.Models.TbEvent", b =>
                {
                    b.Navigation("EventParticipants");
                });

            modelBuilder.Entity("Event_managment.Models.TbLocation", b =>
                {
                    b.Navigation("TbEvents");
                });

            modelBuilder.Entity("Event_managment.Models.TbParticipant", b =>
                {
                    b.Navigation("EventParticipants");
                });
#pragma warning restore 612, 618
        }
    }
}
